/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package servidorproxyhttp.ui;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.swing.DefaultListModel;
import servidorproxyhttp.ServidorProxyHTTP;

/**
 *
 * @author Danilo Alejandro Ochoa Hidalgo
 */
public class AdministradorGUI extends javax.swing.JFrame {

    private static final String FONT_RESET = "\u001B[0m";
    private static final String FONT_RED = "\u001B[31m";

    /* PROPIEDADES DE LA CLASE **************************************************/
    //* Variables para Datos *//
    private static List<Thread> listadoHilos = ServidorProxyHTTP.getListadoHilos();
    private static List<String> listaAlmacenadosEnCache = ServidorProxyHTTP.getAlmacenadosEnCache();
    private static List<String> listaBloqueados = ServidorProxyHTTP.getListaBloqueados();
    private static String mensajeEstado = "";
    //* Variables para el Modelo de los Componentes de Interfaz *//
    private static DefaultListModel dlmHilos;
    private static DefaultListModel dlmAlmacenadosEnCache;
    private static DefaultListModel dlmBloqueados;
    //* Constante para la Ejecución del Actualizador *//
    private final Thread hiloDeActualizacion = new Thread(() -> {
        while (ServidorProxyHTTP.isEJECUTANDO()) {
            try {
                TimeUnit.SECONDS.sleep(5);
                actualizarInterfaz();
            } catch (InterruptedException ex) {
                System.out.println(FONT_RED + "# (AdministradorGUI) interrupción fallida al Actualizar:\n" + FONT_RED + ex + FONT_RESET);
            }
        }
    }, "AdministradorGUI (Actualizador)");

    /**
     * Creates new form AdministradorGUI
     */
    public AdministradorGUI() {
        initComponents();
        setLocationRelativeTo(null);
        presentarHilosEnEjecucion();
        presentarAlmacenadosEnCache();
        presentarBloqueados();
    }

    /* Función para permitir manipular el Actualizador*/
    public Thread getHiloDeActualizacion() {
        return hiloDeActualizacion;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTFurl = new javax.swing.JTextField();
        jBtnBloquearURL = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListBloqueados = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListHilos = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTAEstado = new javax.swing.JTextArea();
        jBtnQuitar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListCache = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jBtnBloquearURL.setText("Bloquear");
        jBtnBloquearURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBloquearURLActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jListBloqueados);

        jScrollPane2.setViewportView(jListHilos);

        jLabel1.setFont(new java.awt.Font("Gill Sans Ultra Bold", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 153, 153));
        jLabel1.setText("ADMINISTRADOR");

        jTAEstado.setEditable(false);
        jTAEstado.setColumns(20);
        jTAEstado.setRows(5);
        jScrollPane3.setViewportView(jTAEstado);

        jBtnQuitar.setText("Quitar");
        jBtnQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnQuitarActionPerformed(evt);
            }
        });

        jLabel2.setText("ESTADO");

        jLabel3.setText("URL (Enlace)");

        jScrollPane4.setViewportView(jListCache);

        jLabel4.setText("HOSTS BLOQUEADOS");

        jLabel5.setText("HILOS EN EJECUCIÓN");

        jLabel6.setText("CACHÉ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(286, 286, 286))
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(27, 27, 27)
                                .addComponent(jBtnQuitar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jTFurl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnBloquearURL)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2)
                                .addGap(38, 38, 38))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jBtnQuitar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE))
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTFurl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jBtnBloquearURL))
                                .addGap(4, 4, 4)))
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4))
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnBloquearURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBloquearURLActionPerformed
        // TODO add your handling code here:
        if (!this.jTFurl.getText().equals("")) { // Comprobar Ingreso de URL != vacío
            try {
                URL url = new URL(this.jTFurl.getText());
                if (ServidorProxyHTTP.addBloqueoAPagina(url)) { // Bloquear
                    this.jTFurl.setText("");
                    nuevoMensajeEstado("# (Bloqueado) " + url.getHost());
                } else {
                    nuevoMensajeEstado("# Host Bloqueado");
                }
            } catch (MalformedURLException ex) {
                System.out.println(FONT_RED + "# (AdministradorGUI): URL con estructura no soportada\n" + FONT_RED + ex + FONT_RESET);
                nuevoMensajeEstado("# URL con estructura NO soportada ");
            }
        } else {
            nuevoMensajeEstado("# Ingrese un URL");
        }
        actualizarInterfaz();

    }//GEN-LAST:event_jBtnBloquearURLActionPerformed

    private void jBtnQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnQuitarActionPerformed
        // TODO add your handling code here:
        if (this.jListBloqueados.getModel().getSize() > 0) { // Comprobar Items en jList != vacío

            if (this.jListBloqueados.getSelectedIndices().length > 0) { // Verificar que hayan Items seleccionados

                this.jListBloqueados.getSelectedValuesList().forEach((s) -> {
                    ServidorProxyHTTP.delBloqueoAPagina(s);
                    nuevoMensajeEstado("# (Desbloqueado) " + s);
                    actualizarInterfaz(); // Presentar el nuevo Mensaje de Estado inmediatamente
                });

            } else {
                nuevoMensajeEstado("# Seleccione un Host para Desbloquearlo");
            }

        } // Si (jList == vacío) entonces { NADA };

    }//GEN-LAST:event_jBtnQuitarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdministradorGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdministradorGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdministradorGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdministradorGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdministradorGUI().setVisible(true);
            }
        });

    }

    /* FUNCIONES DE ACTUALIZACIÓN DE INTERFAZ **************************************************/
    //* ACTUALIZADOR *//
    private void actualizarInterfaz() {

        if (!listadoHilos.equals(ServidorProxyHTTP.getListadoHilos())) {
            listadoHilos = ServidorProxyHTTP.getListadoHilos();
            if (listadoHilos.size() > 50) {
                listadoHilos = listadoHilos.subList(listadoHilos.size() - 50, listadoHilos.size());
            }
            presentarHilosEnEjecucion();
        }
        if (!listaAlmacenadosEnCache.equals(ServidorProxyHTTP.getAlmacenadosEnCache())) {
            listaAlmacenadosEnCache = ServidorProxyHTTP.getAlmacenadosEnCache();
            if (listaAlmacenadosEnCache.size() > 50) {
                listaAlmacenadosEnCache = listaAlmacenadosEnCache.subList(listaAlmacenadosEnCache.size() - 50, listaAlmacenadosEnCache.size());
            }
            presentarAlmacenadosEnCache();
            nuevoMensajeEstado("# (Actualizador) Caché");
        }
        if (!listaBloqueados.equals(ServidorProxyHTTP.getListaBloqueados())) {
            listaBloqueados = ServidorProxyHTTP.getListaBloqueados();
            presentarBloqueados();
        }

        this.jTAEstado.setText(mensajeEstado);
        this.jTAEstado.setCaretPosition(this.jTAEstado.getText().length());

    }

    //* Presentadores de datos en los Componentes de la Interfaz *//
    private void presentarHilosEnEjecucion() {
        dlmHilos = new DefaultListModel();
        listadoHilos.forEach((h) -> {
            dlmHilos.addElement(h.getName() + ": status (" + h.getState() + ")");
        });
        this.jListHilos.setModel(dlmHilos);
        this.jListHilos.setSelectedIndex(listadoHilos.size() - 1);
        this.jListHilos.ensureIndexIsVisible(listadoHilos.size() - 1);
    }

    private void presentarAlmacenadosEnCache() {
        dlmAlmacenadosEnCache = new DefaultListModel();
        int contador = 0;
        for (String aec : listaAlmacenadosEnCache) {
            contador++;
            dlmAlmacenadosEnCache.addElement("(" + contador + ") " + aec);
        }
        this.jListCache.setModel(dlmAlmacenadosEnCache);
        this.jListCache.setSelectedIndex(listaAlmacenadosEnCache.size() - 1);
        this.jListCache.ensureIndexIsVisible(listaAlmacenadosEnCache.size() - 1);
    }

    private void presentarBloqueados() {
        dlmBloqueados = new DefaultListModel();
        listaBloqueados.forEach((b) -> {
            dlmBloqueados.addElement(b);
        });
        this.jListBloqueados.setModel(dlmBloqueados);
        this.jListCache.ensureIndexIsVisible(listaBloqueados.size() - 1);
    }

    private void nuevoMensajeEstado(String mensaje) {
        if ("".equals(this.jTAEstado.getText()) || mensajeEstado.length() > 2000) {
            mensajeEstado = mensaje;
        } else {
            mensajeEstado += "\n" + mensaje;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnBloquearURL;
    private javax.swing.JButton jBtnQuitar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList<String> jListBloqueados;
    private javax.swing.JList<String> jListCache;
    private javax.swing.JList<String> jListHilos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTAEstado;
    private javax.swing.JTextField jTFurl;
    // End of variables declaration//GEN-END:variables

}
